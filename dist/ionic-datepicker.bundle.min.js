!function(n,o){var e=n.createElement("style");if(n.getElementsByTagName("head")[0].appendChild(e),e.styleSheet)e.styleSheet.disabled||(e.styleSheet.cssText=o);else try{e.innerHTML=o}catch(n){e.innerText=o}}(document,".padding_zero {\n  padding: 0;\n}\n.ionic_datepicker_popup .date_selection{\n  /*overflow: hidden;\n  padding: 0 0 8px 0px*/\n}\n.ionic_datepicker_popup .weeks_row{\n  color: #353f58;\n}\n.ionic_datepicker_popup .disable_row{\n  display: none;\n}\n.ionic_datepicker_popup .font_bold {\n  font-weight: bold;\n}\n.ionic_datepicker_popup .padding_top_zero {\n  padding-top: 0;\n}\n.ionic_datepicker_popup .padding_left_5px {\n  padding-left: 5px;\n}\n.ionic_datepicker_popup .padding_right_5px {\n  padding-right: 5px;\n}\n.ionic_datepicker_popup .calendar_grid {\n  height: auto !important;\n}\n.ionic_datepicker_popup .date_col{\n  background-color: #f2f2f2;\n  border: 1px solid #dcdcdc;\n  border-radius: 5px;\n  color: black;\n}\n.ionic_datepicker_popup .today {\n  border: 1px solid #dcdcdc;\n  border-radius: 5px;\n  background-color: #f9ff01 !important;\n  color: black;\n}\n.ionic_datepicker_popup .selected_date {\n  background-color: #00d3fe !important;\n  border-radius: 5px;\n  color: black;\n  font-weight: bold;\n}\n.ionic_datepicker_popup .holiday, .ionic_datepicker_popup .friday{\n  background-color: palevioletred;\n  color: white;\n}\n.ionic_datepicker_popup .popup-head {\n  background-color: #c0c0c0 ;\n  display: none;\n}\n.ionic_datepicker_popup .popup-head .popup-title {\n  color: #ffffff;\n}\n.ionic_datepicker_popup .popup-head .popup-sub-title {\n  color: #ffffff;\n}\n.ionic_datepicker_popup .popup-body {\n   padding: 0px 0px 0px  0px ;\n  background-color: #ffffff;\n}\n.ionic_datepicker_popup .popup-body .selected_date_full {\n  background-color: #c0c0c0;\n  margin: -10px -10px 0 -10px;\n  height: 45px;\n  text-align: center;\n  font-weight: bold;\n  color: #193c74;\n  line-height: 45px;\n  font-size: 18px;\n}\n.ionic_datepicker_popup .popup-body .select_section {\n  padding: 1px 5px;\n}\n.ionic_datepicker_popup .popup-body .pointer_events_none {\n  pointer-events: none;\n  color: #aaaaaa ;\n}\n.ionic_datepicker_popup .popup-body .shfted_days{\n  background-color: #bec7d6;\n  border: 1px solid #dce1e7;\n}\n.ionic_datepicker_popup .popup-body .month_select, .ionic_datepicker_popup .popup-body .year_select {\n  border: none;\n  padding: 0;\n  color : #353f58;\n  background-color: #c0c0c0;\n}\n.ionic_datepicker_popup .popup-body .month_select .input-label, .ionic_datepicker_popup .popup-body .year_select .input-label {\n  padding: 2px 0;\n  width: 0;\n\n}\n.ionic_datepicker_popup .popup-body .month_select select, .ionic_datepicker_popup .popup-body .year_select select {\n  left: 10px;\n  border: none;\n  padding: 0;\n}\n.ionic_datepicker_popup .popup-body .month_select:after, .ionic_datepicker_popup .popup-body .year_select:after {\n  right: 5px;\n  color: #353f58;\n}\n.ionic_datepicker_popup .popup-body .show_nav {\n    padding: 0;\n    background: #c0c0c0;\n }\n.ionic_datepicker_popup .popup-body .show_nav .currentSelectHeader{\n    background-color:  #c0c0c0;\n\n}\n.ionic_datepicker_popup .popup-body .show_nav .prev_btn_section {\n  padding: 5px 0;\n  text-align: left;\n}\n.ionic_datepicker_popup .popup-body .show_nav .prev_btn_section button {\n  padding: 0;\n  color:#353f58;\n}\n.ionic_datepicker_popup .popup-body .show_nav .next_btn_section {\n  padding: 5px 0;\n  text-align: right;\n}\n.ionic_datepicker_popup .popup-body .show_nav .next_btn_section button {\n  padding: 0;\n  color:#353f58;\n}\n.ionic_datepicker_popup .popup-body .button-clear {\n  color: #c0c0c0;\n}\n.ionic_datepicker_popup .popup-buttons {\n  padding: 0;\n  min-height: 45px;\n}\n.ionic_datepicker_popup .popup-buttons button {\n  background-color: #353f58;\n  border-radius: 0;\n  margin-right: 1px;\n  color: white;\n}\n\n\n\n\n\n\n\n\n\n\n\n.ionic_datepicker_modal .header, .ionic_datepicker_modal .footer {\n  background-color: #c0c0c0 ;\n}\n.ionic_datepicker_modal .header .title, .ionic_datepicker_modal .header .button, .ionic_datepicker_modal .footer .title, .ionic_datepicker_modal .footer .button {\n  color: #ffffff;\n}\n.ionic_datepicker_modal .footer .button-block {\n  margin: 0;\n}\n.ionic_datepicker_modal .today {\n  border: 1px solid #c0c0c0 ;\n}\n.ionic_datepicker_modal .selected_date {\n  background-color: #c0c0c0 ;\n  color: #fff;\n  font-weight: bold;\n}\n.ionic_datepicker_modal .pointer_events_none {\n  pointer-events: none;\n  color: #aaaaaa ;\n}\n.ionic_datepicker_modal .select_section {\n  padding: 1px 5px;\n}\n.ionic_datepicker_modal .button-clear {\n  color: #c0c0c0 ;\n}\n.ionic_datepicker_modal .month_select, .ionic_datepicker_modal .year_select {\n  border: none;\n  border-bottom: 1px solid #c0c0c0 ;\n  padding: 0;\n}\n.ionic_datepicker_modal .month_select .input-label, .ionic_datepicker_modal .year_select .input-label {\n  padding: 2px 0;\n  width: 0;\n}\n.ionic_datepicker_modal .month_select select, .ionic_datepicker_modal .year_select select {\n  left: 10px;\n  border: none;\n  padding: 0 10px;\n}\n.ionic_datepicker_modal .month_select:after, .ionic_datepicker_modal .year_select:after {\n  right: 5px;\n  color: #c0c0c0 ;\n}\n.ionic_datepicker_modal .padding_left_5px {\n  padding-left: 5px;\n}\n.ionic_datepicker_modal .padding_right_5px {\n  padding-right: 5px;\n}\n.ionic_datepicker_modal .date_col {\n  height: 50px;\n  line-height: 50px;\n}\n.ionic_datepicker_modal .font_bold {\n  font-weight: bold;\n}\n.ionic_datepicker_modal .font_22px {\n  font-size: 22px;\n}\n.platform-android .ionic_datepicker_modal .bar .title.title-left {\n  text-align: center;\n}\n.platform-android .ionic_datepicker_modal select {\n  left: 25%;\n}\n.platform-ios .ionic_datepicker_modal select {\n  left: 5%;\n}");
(function(module) {
try {
  module = angular.module('ionic-datepicker.templates');
} catch (e) {
  module = angular.module('ionic-datepicker.templates', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('ionic-datepicker-modal.html',
    '<ion-modal-view class=ionic_datepicker_modal><ion-header-bar class=header><h1 class=title>{{selctedDateEpoch | date : mainObj.dateFormat}}</h1></ion-header-bar><ion-content class=ionic_datepicker_modal_content><div><div class="row text-center"><div class="col col-10 left_arrow"><button class="button-clear font_22px" ng-click=prevMonth() ng-class="{\'pointer_events_none\':((firstDayEpoch - 86400000) < fromDate)}"><i class="icon ion-chevron-left"></i></button></div><div class="col col-80 text-center"><div class="row select_section"><div class="col-50 padding_right_5px"><label class="item item-input item-select month_select"><span class=input-label>&nbsp;</span><select ng-model=currentMonth ng-change=monthChanged(currentMonth)><option ng-repeat="month in monthsList" ng-selected="month == currentMonthSelected" value={{month}}>{{month}}</option></select></label></div><div class="col-50 padding_left_5px"><label class="item item-input item-select year_select"><span class=input-label>&nbsp;</span><select ng-model=currentYear ng-change=yearChanged(currentYear)><option ng-repeat="year in yearsList" ng-selected="year == currentYearSelected" value={{year}}>{{year}}</option></select></label></div></div></div><div class="col col-10 right_arrow"><button class="button-clear font_22px" ng-click=nextMonth() ng-class="{\'pointer_events_none\':((lastDayEpoch + 86400000)> toDate)}"><i class="icon ion-chevron-right"></i></button></div></div><div class=calendar_grid><div class="row padding-top weeks_row"><div class="col text-center font_bold" ng-repeat="weekName in weeksList track by $index" ng-bind=weekName></div></div><div><div class="row text-center padding_top_zero" ng-repeat="row in rows track by $index"><div class="col padding_zero date_col" ng-repeat="col in cols track by $index" ng-class="{\'selected_date\': (dayList[row + $index].epoch === selctedDateEpoch), \'today\' : (dayList[row + $index].epoch == today), \'pointer_events_none\':((disabledDates.indexOf(dayList[row + $index].epoch) >= 0) || (dayList[row + $index].disabled))}" ng-click="dateSelected(dayList[row + $index])"><div class=date_cell>{{dayList[row + col].date}}</div></div></div></div></div></div></ion-content><ion-footer-bar class=footer><div class="row padding_zero"><button class="button button-clear button-block button_set" ng-if=!mainObj.closeOnSelect ng-click=setIonicDatePickerDate()>{{mainObj.setLabel}}</button> <button class="button button-clear button-block button_today" ng-if=mainObj.showTodayButton ng-click=setIonicDatePickerTodayDate()>{{mainObj.todayLabel}}</button> <button class="button button-clear button-block button_close" ng-click=closeIonicDatePickerModal()>{{mainObj.closeLabel}}</button></div></ion-footer-bar></ion-modal-view>');
}]);
})();

(function(module) {
try {
  module = angular.module('ionic-datepicker.templates');
} catch (e) {
  module = angular.module('ionic-datepicker.templates', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('ionic-datepicker-popup.html',
    '<div ng-if=jl><div class=date_selection><div class="row show_nav"><div class="col-10 prev_btn_section"><button class=button-clear ng-click=prevMonth() ng-class="{\'pointer_events_none\':((firstDayEpoch - 86400000) < fromDate)}"><i class="icon ion-chevron-right"></i></button></div><div class="col-80 text-center"><div class="row select_section"><div class="col-50 padding_right_5px"><label class="item item-input item-select month_select"><span class=input-label>&nbsp;</span><select class=currentSelectHeader ng-model=currentMonth ng-change=monthChanged(currentMonth) style=right:18px;><option ng-repeat="month in monthsList" ng-selected="month==currentMonthSelected" value={{month}}>{{month}}</option></select></label></div><div class="col-50 padding_left_5px"><label class="item item-input item-select year_select"><span class=input-label>&nbsp;</span><select class=currentSelectHeader ng-model=currentYear ng-options="year for year in yearsList track by year" ng-change=yearChanged(currentYear)></select></label></div></div></div><div class="col-10 next_btn_section"><button class=button-clear ng-click=nextMonth() ng-class="{\'pointer_events_none\':((lastDayEpoch + 86400000)> toDate)}"><i class="icon ion-chevron-left"></i></button></div></div><div class=calendar_grid><div class="row weeks_row"><div class="col text-center font_bold" ng-repeat="weekName in weeksList track by $index" ng-bind=weekName></div></div><div><div class="row text-center padding_top_zero" ng-repeat="row in rows track by $index" ng-class="{\'disable_row\' : ( $index == 5 && dayList[rows[$index]].date ==null)}"><div class="col no_padding date_col" ng-repeat="col in cols track by $index" ng-class="{\'selected_date\': (dayList[row + $index].epoch === selctedDateEpoch), \'today\' : (dayList[row + $index].epoch == today), \'pointer_events_none\':((disabledDates.indexOf(dayList[row + $index].epoch) >= 0) || dayList[row + $index].disabled), \'shfted_days\':(dayList[row + col].date==null), \'holiday\':checkHoliday(dayList[row+$index].epoch), \'friday\': col==6 }" ng-click="dateSelected(dayList[row + $index])"><div class=date_cell>{{dayList[row + col].date}}</div></div></div></div></div></div></div><div ng-if=!jl><div class=date_selection><div class="row show_nav"><div class="col-10 prev_btn_section"><button class=button-clear ng-click=prevMonth() ng-class="{\'pointer_events_none\':((firstDayEpoch - 86400000) < fromDate)}"><i class="icon ion-chevron-left"></i></button></div><div class="col-80 text-center"><div class="row select_section"><div class="col-50 padding_right_5px"><label class="item item-input item-select month_select"><span class=input-label>&nbsp;</span><select class=currentSelectHeader ng-model=currentMonth ng-change=monthChanged(currentMonth)><option ng-repeat="month in monthsList" ng-selected="month==currentMonthSelected" value={{month}}>{{month}}</option></select></label></div><div class="col-50 padding_left_5px"><label class="item item-input item-select year_select"><span class=input-label>&nbsp;</span><select class=currentSelectHeader ng-model=currentYear ng-options="year for year in yearsList track by year" ng-change=yearChanged(currentYear)></select></label></div></div></div><div class="col-10 next_btn_section"><button class=button-clear ng-click=nextMonth() ng-class="{\'pointer_events_none\':((lastDayEpoch + 86400000)> toDate)}"><i class="icon ion-chevron-right"></i></button></div></div><div class=calendar_grid><div class="row weeks_row"><div class="col text-center font_bold" ng-repeat="weekName in weeksList track by $index" ng-bind=weekName></div></div><div><div class="row text-center padding_top_zero" ng-repeat="row in rows track by $index" ng-class="{\'disable_row\' : ( $index == 5 && dayList[rows[$index]].date ==null)}"><div class="col no_padding date_col" ng-repeat="col in cols track by $index" ng-class="{\'selected_date\': (dayList[row + $index].epoch === selctedDateEpoch), \'today\' : (dayList[row + $index].epoch == today), \'pointer_events_none\':((disabledDates.indexOf(dayList[row + $index].epoch) >= 0) || dayList[row + $index].disabled), \'shfted_days\':(dayList[row + col].date==null)}" ng-click="dateSelected(dayList[row + $index])"><div class=date_cell>{{dayList[row + col].date}}</div></div></div></div></div></div></div>');
}]);
})();

angular.module('ionic-datepicker', [
  'ionic',
  'ionic-datepicker.service',
  'ionic-datepicker.provider'
  // 'ionic-datepicker.templates'
]);

angular.module('ionic-datepicker.provider', [])


  .provider('ionicDatePicker', function () {


    var config = {

     
      templateType: 'popup',
      setLabel: 'Set',
      todayLabel: 'Today',
      closeLabel: 'Close',
      inputDate: new Date(),
      mondayFirst: true,
      from : new Date(2010,1,1),
      to : new Date(2050,1,1),
      showTodayButton: false,
      closeOnSelect: false,
      disableWeekdays: [],
      lanq: true,   // true for persian calendar and false for georgian calendar
      
      weeksList: ['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'],
      monthsList: ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند"],
      
    };

    if (localStorage.getItem('calendarType') != 'shamsi') {
      config.lanq = false;
      config.weeksList = ["S", "M", "T", "W", "T", "F", "S"];
      config.monthsList = ["Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"]
    }

    this.configDatePicker = function (inputObj) {
      angular.extend(config, inputObj);
    };

    this.$get = ['$rootScope', '$ionicPopup', '$ionicModal', 'IonicDatepickerService', function ($rootScope, $ionicPopup, $ionicModal, IonicDatepickerService, dateFactory) {

      var provider = {};

      var $scope = $rootScope.$new();
      $scope.today = resetHMSM(new Date()).getTime();
      $scope.disabledDates = [];
      $rootScope.holiDays=[];
      function getHoliDays(){
                    
            var AJAX_req = new XMLHttpRequest();
            AJAX_req.open("GET", "jsons/holidays.json", true);
            AJAX_req.setRequestHeader("Content-type", "application/json");
            AJAX_req.onreadystatechange = function () {
                if (AJAX_req.readyState == 4 && AJAX_req.status == 200) {
                    
                    var js = JSON.parse(AJAX_req.responseText);
                   
                    js.holidays.forEach(function(element) {
                      var tempDate = new Date(element.split('/')[0],element.split('/')[1]-1,element.split('/')[2],0,0,0,0);
                      var i = tempDate.getTime();
                      if(tempDate.toString().match(/([A-Z]+[\+-][0-9]+.*)/)[1] == 'GMT+0430 (Iran Daylight Time)')
                      {
                          i = tempDate.setHours(0,0,0,0);
                         
                      }
                      $rootScope.holiDays.push(i); 
                    });
                }
            }
            AJAX_req.send();
        
      }
      if($rootScope.holiDays.length == 0){
        getHoliDays();
      }
     
      $scope.checkHoliday = function (input) {
        if ($rootScope.holiDays.length > 0 && input != null) {
            if($rootScope.holiDays.indexOf(input)> -1){        
               return true;
            }     
          }
          return false;
       }
      //Reset the hours, minutes, seconds and milli seconds
      function resetHMSM(currentDate) {
        currentDate.setHours(0);
        currentDate.setMinutes(0);
        currentDate.setSeconds(0);
        currentDate.setMilliseconds(0);
        return currentDate;
      }

      //Previous month
      $scope.prevMonth = function () {
        if ($scope.mainObj.lanq) {
          var foo = georgian2day($scope.currentDate.getFullYear(), $scope.currentDate.getMonth() + 1, $scope.currentDate.getDate());
          var boo = dayToShamsi(foo);
          if (boo.jm == 1) {
            boo.jy += -1;
            boo.jm = 12;
          }
          else {
            boo.jm += -1;
          }
          var soo = shamsiToDay(boo.jy, boo.jm, 1);
          var coo = dayToGeorgian(soo);

          $scope.currentDate = new Date(coo.gy, coo.gm, 1);
          $scope.currentMonth = $scope.mainObj.monthsList[soo.jm - 1];
          $scope.currentYear = soo.jy;

          refreshDateList($scope.currentDate);
        }
        else {
          if ($scope.currentDate.getMonth() === 1) {
            $scope.currentDate.setFullYear($scope.currentDate.getFullYear());
          }
          $scope.currentDate.setMonth($scope.currentDate.getMonth() - 1);
          $scope.currentMonth = $scope.mainObj.monthsList[$scope.currentDate.getMonth()];
          $scope.currentYear = $scope.currentDate.getFullYear();
          refreshDateList($scope.currentDate);
        }
      };

      //Next month
      $scope.nextMonth = function () {
        if ($scope.mainObj.lanq) {
          var foo = georgian2day($scope.currentDate.getFullYear(), $scope.currentDate.getMonth() + 1, $scope.currentDate.getDate());
          var boo = dayToShamsi(foo);
          if (boo.jm == 12) {
            boo.jy += 1;
            boo.jm = 1;
          }
          else {
            boo.jm = boo.jm +1;
          }
          var soo = shamsiToDay(boo.jy, boo.jm, 1);
          var coo = dayToGeorgian(soo);

          $scope.currentDate = new Date(coo.gy, coo.gm, 1);
          $scope.currentMonth = $scope.mainObj.monthsList[soo.jm - 1];
          $scope.currentYear = soo.jy;

          refreshDateList($scope.currentDate);
        }
        else {
          if ($scope.currentDate.getMonth() === 11) {
            $scope.currentDate.setFullYear($scope.currentDate.getFullYear());
          }
          $scope.currentDate.setDate(1);
          $scope.currentDate.setMonth($scope.currentDate.getMonth() + 1);
          $scope.currentMonth = $scope.mainObj.monthsList[$scope.currentDate.getMonth()];
          $scope.currentYear = $scope.currentDate.getFullYear();
          refreshDateList($scope.currentDate);
        }
      };

      //Date selected

      $scope.dateSelected = function (selectedDate) {

        if (!selectedDate || Object.keys(selectedDate).length === 0) return;
        $scope.selctedDateEpoch = selectedDate.epoch;

        if ($scope.mainObj.closeOnSelect) {
          $scope.mainObj.callback($scope.selctedDateEpoch);
          if ($scope.mainObj.templateType.toLowerCase() == 'popup') {
            $scope.popup.close();
          } else {
            closeModal();
          }
        }
      };

      //Set today as date for the modal
      $scope.setIonicDatePickerTodayDate = function () {
        var today = new Date();
        refreshDateList(new Date());
        $scope.selctedDateEpoch = resetHMSM(today).getTime();
        if ($scope.mainObj.closeOnSelect) {
          $scope.mainObj.callback($scope.selctedDateEpoch);
          closeModal();
        }
      };

      //Set date for the modal
      $scope.setIonicDatePickerDate = function () {
        $scope.mainObj.callback($scope.selctedDateEpoch);
        closeModal();
      };




      function chekJalaliDate(jy) {
        if (jy > 1800) {
          return false;
        }
        else {
          return true;
        }
      };




      function div(a, b) {
        return ~~(a / b)
      }

      function mod(a, b) {
        return a - ~~(a / b) * b
      }

      function shamsiToDay(jy, jm, jd) {
        var r = jalCal(jy)
        return georgian2day(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1
      }

      function georgian2day(gy, gm, gd) {
        var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)
          + div(153 * mod(gm + 9, 12) + 2, 5)
          + gd - 34840408
        d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752
        return d
      }

      function jalCal(jy) {
        // Jalaali years starting the 33-year rule.
        var breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210
          , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178
        ]
          , bl = breaks.length
          , gy = jy + 621
          , leapJ = -14
          , jp = breaks[0]
          , jm
          , jump
          , leap
          , leapG
          , march
          , n
          , i;

        if (jy < jp || jy >= breaks[bl - 1])
          throw new Error('Invalid Jalaali year ' + jy);

        // Find the limiting years for the Jalaali year jy.
        for (i = 1; i < bl; i += 1) {
          jm = breaks[i];
          jump = jm - jp;
          if (jy < jm)
            break;
          leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
          jp = jm
        }
        n = jy - jp;

        // Find the number of leap years from AD 621 to the beginning
        // of the current Jalaali year in the Persian calendar.
        leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
        if (mod(jump, 33) === 4 && jump - n === 4)
          leapJ += 1

        // And the same in the Gregorian calendar (until the year gy).
        leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150

        // Determine the Gregorian date of Farvardin the 1st.
        march = 20 + leapJ - leapG

        // Find how many years have passed since the last leap year.
        if (jump - n < 6)
          n = n - jump + div(jump + 4, 33) * 33
        leap = mod(mod(n + 1, 33) - 1, 4)
        if (leap === -1) {
          leap = 4
        }

        return {
          leap: leap
          , gy: gy
          , march: march
        }
      }

      function dayToGeorgian(jdn) {
        var
          j,
          i,
          gd,
          gm,
          gy;

        j = 4 * jdn + 139361631
        j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908
        i = div(mod(j, 1461), 4) * 5 + 308
        gd = div(mod(i, 153), 5) + 1
        gm = mod(div(i, 153), 12) + 1
        gy = div(j, 1461) - 100100 + div(8 - gm, 6)
        return {
          gy: gy,
          gm: gm,
          gd: gd
        }
      }


      /*
       Is this a leap year or not?
       */
      function isLeapJalaaliYear(jy) {
        return jalCal(jy).leap === 0
      }

      /*
       Number of days in a given month in a Jalaali year.
       */
      function jalaaliMonthLength(jy, jm) {
        if (jm <= 6) return 31
        if (jm <= 11) return 30
        if (isLeapJalaaliYear(jy)) return 30
        return 29
      }
      function dayToShamsi(jdn) {
        var gy = dayToGeorgian(jdn).gy // Calculate Gregorian year (gy).
          , jy = gy - 621
          , r = jalCal(jy)
          , jdn1f = georgian2day(gy, 3, r.march)
          , jd
          , jm
          , k

        // Find number of days that passed since 1 Farvardin.
        k = jdn - jdn1f
        if (k >= 0) {
          if (k <= 185) {
            // The first 6 months.
            jm = 1 + div(k, 31)
            jd = mod(k, 31) + 1
            return {
              jy: jy
              , jm: jm
              , jd: jd
            }
          } else {
            // The remaining months.
            k -= 186
          }
        } else {
          // Previous Jalaali year.
          jy -= 1
          k += 179
          if (r.leap === 1)
            k += 1
        }
        jm = 7 + div(k, 30)
        jd = mod(k, 30) + 1
        return {
          jy: jy
          , jm: jm
          , jd: jd
        }
      }



      //Setting the disabled dates list.
      function setDisabledDates(mainObj) {
        if (!mainObj.disabledDates || mainObj.disabledDates.length === 0) {
          $scope.disabledDates = [];
        } else {
          $scope.disabledDates = [];
          angular.forEach(mainObj.disabledDates, function (val, key) {
            val = resetHMSM(new Date(val));
            $scope.disabledDates.push(val.getTime());
          });
        }
      }

      //Refresh the list of the dates of a month
      function refreshDateList(currentDate) {
        if ($scope.mainObj.lanq) {
          currentDate = resetHMSM(currentDate);
          $scope.currentDate = angular.copy(currentDate);

          var firstDate = new Date();
          var lastDate = new Date();
          var shamsiObj = {};

          //current date is jalali and know we should change start date
          var geoDay = georgian2day($scope.currentDate.getFullYear(), $scope.currentDate.getMonth() + 1, $scope.currentDate.getDate());
          shamsiObj = dayToShamsi(geoDay);
          $scope.currentDate.shamsiDate = shamsiObj;
          var dateStartVar = shamsiToDay(shamsiObj.jy, shamsiObj.jm, 1);
          var dateEndVar = dateStartVar + jalaaliMonthLength(shamsiObj.jy, shamsiObj.jm) - 1;
          var dateStartObj = dayToGeorgian(dateStartVar);
          var dateEndObj = dayToGeorgian(dateEndVar);
          firstDay = new Date(dateStartObj.gy, dateStartObj.gm - 1, dateStartObj.gd);
          lastDay = new Date(dateEndObj.gy, dateEndObj.gm - 1, dateEndObj.gd);


          $scope.monthsList = [];
          if ($scope.mainObj.monthsList && $scope.mainObj.monthsList.length === 12) {
            $scope.monthsList = $scope.mainObj.monthsList;
          } else {
            $scope.monthsList = IonicDatepickerService.monthsList;
          }
          
          $scope.yearsList = IonicDatepickerService.getYearsList($scope.mainObj.from, $scope.mainObj.to,$scope.mainObj.lanq);

          $scope.dayList = [];

          var tempDate, disabled;
          $scope.firstDayEpoch = resetHMSM(new Date(firstDay)).getTime();
          $scope.lastDayEpoch = resetHMSM(new Date(lastDay)).getTime();

          $scope.tempFirst = $scope.firstDayEpoch;
          $scope.tempLast = $scope.lastDayEpoch;

          for (var i = $scope.tempFirst; i <= $scope.tempLast; i += 86400000) {
            tempDate = new Date(i);
            disabled = (tempDate.getTime() < $scope.fromDate) || (tempDate.getTime() > $scope.toDate) || $scope.mainObj.disableWeekdays.indexOf(tempDate.getDay()) >= 0;
            if(tempDate.toString().match(/([A-Z]+[\+-][0-9]+.*)/)[1] == 'GMT+0430 (Iran Daylight Time)')
             {
               i = tempDate.setHours(0,0,0,0);
               tempDate = new Date(tempDate);
             }
            $scope.dayList.push({
              date: tempDate.getDate(),
              month: tempDate.getMonth(),
              year: tempDate.getFullYear(),
              day: tempDate.getDay(),
              epoch: tempDate.getTime(),
              disabled: disabled
            });
          }


          //To set saterday as the first day of the week.
          var firstDayMonday = ($scope.dayList[0].day + 1) % 7;
          // firstDayMonday = (firstDayMonday == -2) ? 5 : firstDayMonday;
          // firstDayMonday = (firstDayMonday == -1) ? 6 : firstDayMonday;

          for (var j = 0; j < firstDayMonday; j++) {
            $scope.dayList.unshift({});
          }

          for (var i = firstDayMonday; i < $scope.dayList.length; i++) {
            $scope.dayList[i].date = i - firstDayMonday + 1;
          }


          $scope.rows = [0, 7, 14, 21, 28, 35];
          $scope.cols = [0, 1, 2, 3, 4, 5, 6];
          $scope.currentMonth = $scope.mainObj.monthsList[shamsiObj.jm - 1];
          $scope.currentYear = shamsiObj.jy;
          $scope.currentMonthSelected = angular.copy($scope.currentMonth);
          $scope.currentYearSelected = angular.copy($scope.currentYear);
          $scope.currentDaySelected = angular.copy(shamsiObj.jd);
          $scope.year = $scope.currentYearSelected;
          $scope.numColumns = 7;
        }
        else {
          currentDate = resetHMSM(currentDate);
          $scope.currentDate = angular.copy(currentDate);

          var firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDate();
          var lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();

          $scope.monthsList = [];
          if ($scope.mainObj.monthsList && $scope.mainObj.monthsList.length === 12) {
            $scope.monthsList = $scope.mainObj.monthsList;
          } else {
            $scope.monthsList = IonicDatepickerService.monthsList;
          }
          $scope.yearsList = IonicDatepickerService.getYearsList($scope.mainObj.from, $scope.mainObj.to,$scope.mainObj.lanq);

          $scope.dayList = [];

          var tempDate, disabled;
          $scope.firstDayEpoch = resetHMSM(new Date(firstDay.getFullYear(), firstDay.getMonth(), firstDay.getDate())).getTime();
          $scope.lastDayEpoch = resetHMSM(new Date(lastDay.getFullYear(), lastDay.getMonth(), lastDay.getDate())).getTime();


          for (var i = firstDay; i <= lastDay; i++) {
            tempDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
            disabled = (tempDate.getTime() < $scope.fromDate) || (tempDate.getTime() > $scope.toDate) || $scope.mainObj.disableWeekdays.indexOf(tempDate.getDay()) >= 0;
            $scope.dayList.push({
              date: tempDate.getDate(),
              month: tempDate.getMonth(),
              year: tempDate.getFullYear(),
              day: tempDate.getDay(),
              epoch: tempDate.getTime(),
              disabled: disabled
            });
          }

          //To set Monday as the first day of the week.
          var firstDayMonday = $scope.dayList[0].day - $scope.mainObj.mondayFirst;
          firstDayMonday = (firstDayMonday < 0) ? 6 : firstDayMonday;

          for (var j = 0; j < firstDayMonday; j++) {
            $scope.dayList.unshift({});
          }

          $scope.rows = [0, 7, 14, 21, 28, 35];
          $scope.cols = [0, 1, 2, 3, 4, 5, 6];

          $scope.currentMonth = $scope.mainObj.monthsList[currentDate.getMonth()];
          $scope.currentYear = currentDate.getFullYear();
          $scope.currentMonthSelected = angular.copy($scope.currentMonth);
          $scope.currentYearSelected = angular.copy($scope.currentYear);
          $scope.numColumns = 7;
        }
      }

      //Month changed
      $scope.monthChanged = function (month) {
        if($scope.mainObj.lanq){
        var monthNumber = $scope.monthsList.indexOf(month);
        var a = georgian2day($scope.currentDate.getFullYear(), $scope.currentDate.getMonth() + 1, $scope.currentDate.getDate());
        var b = dayToShamsi(a);
        var x = shamsiToDay(b.jy, monthNumber, b.jd);
        var y = dayToGeorgian(x);
        $scope.currentDate.setMonth(y.gm);
        refreshDateList($scope.currentDate);
        }
        else{
            var monthNumber = $scope.monthsList.indexOf(month);
        $scope.currentDate.setMonth(monthNumber);
        refreshDateList($scope.currentDate);
        }
      };

      //Year changed
      $scope.yearChanged = function (year) {
        if($scope.mainObj.lanq){
        var a = georgian2day($scope.currentDate.getFullYear(), $scope.currentDate.getMonth() + 1, $scope.currentDate.getDate());
        var b = dayToShamsi(a);
        var x = shamsiToDay(parseInt(year), b.jm, b.jd);
        var y = dayToGeorgian(x);
        $scope.currentDate.setFullYear(y.gy);
        refreshDateList($scope.currentDate);
        }
        else{
           $scope.currentDate.setFullYear(year);
           refreshDateList($scope.currentDate);
        }
      };

      //Setting up the initial object
      function setInitialObj(ipObj) {
        $scope.mainObj = angular.copy(ipObj);
       
        $scope.selctedDateEpoch = resetHMSM($scope.mainObj.inputDate).getTime();
        var d = new Date($scope.selctedDateEpoch);
        var selDate = georgian2day(d.getFullYear(), d.getMonth() + 1, d.getDate());

        $scope.showObj = dayToShamsi(selDate);
        $scope.year = $scope.showObj.jy;
        if ($scope.mainObj.weeksList && $scope.mainObj.weeksList.length === 7) {
          $scope.weeksList = $scope.mainObj.weeksList;
        } else {
          $scope.weeksList = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        }
        if ($scope.mainObj.mondayFirst) {
          $scope.weeksList.push($scope.mainObj.weeksList.shift());
        }
        $scope.disableWeekdays = $scope.mainObj.disableWeekdays;

        refreshDateList($scope.mainObj.inputDate);
        setDisabledDates($scope.mainObj);
      }

      $ionicModal.fromTemplateUrl('lib/Persian-Ionic-Datepicker/src/ionic-datepicker-modal.html', {
        scope: $scope,
        animation: 'slide-in-up'
      }).then(function (modal) {
        $scope.modal = modal;
      });

      $scope.$on('$destroy', function () {
        $scope.modal.remove();
      });

      function openModal() {
        $scope.modal.show();
      }

      function closeModal() {
        $scope.modal.hide();
      }

      $scope.closeIonicDatePickerModal = function () {
        closeModal();
      };
      

      //Open datepicker popup
      provider.openDatePicker = function (ipObj) {
        var buttons = [];
      
         if(localStorage.getItem('calendarType')!='shamsi'){
          ipObj.lanq = false;
          $scope.jl = false;
        }
        else{
          ipObj.lanq = true;
          $scope.jl = true;
        }
        $scope.mainObj = angular.extend({}, config, ipObj);
        if ($scope.mainObj.from) {
          $scope.fromDate = resetHMSM(new Date($scope.mainObj.from)).getTime();
        }
        if ($scope.mainObj.to) {
          $scope.toDate = resetHMSM(new Date($scope.mainObj.to)).getTime();
        }

        if (ipObj.disableWeekdays && config.disableWeekdays) {
          $scope.mainObj.disableWeekdays = ipObj.disableWeekdays.concat(config.disableWeekdays);
        }
        setInitialObj($scope.mainObj);

        if (!$scope.mainObj.closeOnSelect) {
          buttons = [{
            text: $scope.mainObj.setLabel,
            type: 'button_set',
            onTap: function (e) {
              $scope.mainObj.callback($scope.selctedDateEpoch);
            }
          }];
        }

        if ($scope.mainObj.showTodayButton) {
          buttons.push({
            text: $scope.mainObj.todayLabel,
            type: 'button_today',
            onTap: function (e) {
              var today = new Date();
              refreshDateList(new Date());
              //$scope.selctedDateEpoch = resetHMSM(today).getTime();
              $scope.setIonicDatePickerTodayDate();
              if (!$scope.mainObj.closeOnSelect) {
                e.preventDefault();
              }
            }
          });
        }

        buttons.push({
          text: $scope.mainObj.closeLabel,
          type: 'button_close',
          onTap: function (e) {
          }
        });

        if ($scope.mainObj.templateType.toLowerCase() == 'popup') {
          $scope.popup = $ionicPopup.show({
            templateUrl: 'lib/Persian-Ionic-Datepicker/src/ionic-datepicker-popup.html',
            scope: $scope,
            cssClass: 'ionic_datepicker_popup',
            buttons: buttons
          });
        } else {
          openModal();
        }
      };

      return provider;

    }];

  })

angular.module('ionic-datepicker.service', [])

  .service('IonicDatepickerService', function (dateConverterFactory) {

    this.monthsList = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    this.getYearsList = function (from, to,lanq) {
     var minYear = 1390;
     var maxYear = 1420; 
     if(!lanq){
       minYear = 2010;
       maxYear = 2050; 
     }
      var yearsList = [];
      if(!isNaN( from.getTime() ))
      {
        if(lanq){
            var b = dateConverterFactory.toJalaali(from.getFullYear(), from.getMonth() + 1, from.getDate());
            minYear= b.jy ;
        }
        else{
             minYear = new Date(from).getFullYear();
        }
      }

      if(!isNaN( to.getTime() )){
          if(lanq){
            var b = dateConverterFactory.toJalaali(to.getFullYear(), to.getMonth() + 1, to.getDate());
            maxYear= b.jy ;
          }
          else{
             maxYear = new Date(to).getFullYear();
          }
      }
      for (var i = minYear; i <= maxYear; i++) {
        yearsList.push(i);
      }

      return yearsList;
    };
  })

.factory('dateConverterFactory',function()
    {


        var factory = {};
        // a function for converting javascript datetime to c# datetime for handeling date on server
        factory.convertToCSharpDateTime = function(date){
           var day = date.getDay();        // yields day
           var month = date.getMonth();    // yields month
           var year = date.getFullYear();  // yields year
           var hour = date.getHours();     // yields hours 
           var minute = date.getMinutes(); // yields minutes
           var second = date.getSeconds(); // yields seconds
           // After this construct a string with the above results as below
           var time = day + "/" + month + "/" + year + " " + hour + ':' + minute + ':' + second;  
           return time;
        }

        factory.convertToServerDate = function(comingDate){
            
            if(comingDate == ""){
                return "";
            }
           var date = new Date(comingDate); 
           var day = date.getDate();        
           var month = date.getMonth() + 1;    
           var year = date.getFullYear();
           var correctFormat = month+'/'+day+'/'+year ;
           return correctFormat ; 
        }

        factory.jalaliToday = function()
        {
            var today = new Date();
            var todayDate = today.getDate();
            var todayMonth = today.getMonth() + 1;
            var todayYear = today.getFullYear();
            return factory.toJalaali(todayYear,todayMonth,todayDate);
        };

        factory.strigify = function(dateObject)
        {
            var jd="",jm="";
            if(dateObject.jd <= 9) {
                jd = "0" + dateObject.jd;
            }
            else
                jd=dateObject.jd;
            if(dateObject.jm <= 9) {
                jm = "0" + dateObject.jm;
            }
            else
                jm=dateObject.jm;

            return dateObject.jy+'/' + jm + '/' + jd;
        }
        factory.editDateNumbers= function(dateObject)
        {
            
            var date = dateObject.split('/');
            
            if(date[2] <=9 && date[2].length != 2) {
                date[2] = "0" + date[2];
            }
            else
                date[2]=date[2];
            if( date[1] <=9 && date[1] != 2) {
                date[1] = "0" + date[1];
            }
            else
                date[1]=date[1];

            return date;
        }


        /*
         Converts a Gregorian date to Jalaali.
         */
        factory.toJalaali = function(gy, gm, gd) {
            return day2jalali(georgian2day(gy, gm, gd))
        };

        /*
         Converts a Jalaali date to Gregorian.
         */
        factory.toGregorian = function(jy, jm, jd) {
            return day2georgian(jalali2day(jy, jm, jd))
        };


        /*
         Converts a date of the Jalaali calendar to the Julian Day number.

         @param jy Jalaali year (1 to 3100)
         @param jm Jalaali month (1 to 12)
         @param jd Jalaali day (1 to 29/31)
         @return Julian Day number
         */
        function jalali2day(jy, jm, jd) {
            var r = jalCal(jy)
            return georgian2day(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1
        }

        /*
         Converts the Julian Day number to a date in the Jalaali calendar.

         @param jdn Julian Day number
         @return
         jy: Jalaali year (1 to 3100)
         jm: Jalaali month (1 to 12)
         jd: Jalaali day (1 to 29/31)
         */
        function day2jalali(jdn) {
            var gy = day2georgian(jdn).gy // Calculate Gregorian year (gy).
                , jy = gy - 621
                , r = jalCal(jy)
                , jdn1f = georgian2day(gy, 3, r.march)
                , jd
                , jm
                , k

            // Find number of days that passed since 1 Farvardin.
            k = jdn - jdn1f
            if (k >= 0) {
                if (k <= 185) {
                    // The first 6 months.
                    jm = 1 + div(k, 31)
                    jd = mod(k, 31) + 1
                    return  { jy: jy
                        , jm: jm
                        , jd: jd
                    }
                } else {
                    // The remaining months.
                    k -= 186
                }
            } else {
                // Previous Jalaali year.
                jy -= 1
                k += 179
                if (r.leap === 1)
                    k += 1
            }
            jm = 7 + div(k, 30)
            jd = mod(k, 30) + 1
            return  { jy: jy
                , jm: jm
                , jd: jd
            }
        }

        /*
         Calculates the Julian Day number from Gregorian or Julian
         calendar dates. This integer number corresponds to the noon of
         the date (i.e. 12 hours of Universal Time).
         The procedure was tested to be good since 1 March, -100100 (of both
         calendars) up to a few million years into the future.

         @param gy Calendar year (years BC numbered 0, -1, -2, ...)
         @param gm Calendar month (1 to 12)
         @param gd Calendar day of the month (1 to 28/29/30/31)
         @return Julian Day number
         */
        function georgian2day(gy, gm, gd) {
            var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)
                + div(153 * mod(gm + 9, 12) + 2, 5)
                + gd - 34840408
            d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752
            return d
        }

        /*
         Calculates Gregorian and Julian calendar dates from the Julian Day number
         (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
         calendars) to some millions years ahead of the present.

         @param jdn Julian Day number
         @return
         gy: Calendar year (years BC numbered 0, -1, -2, ...)
         gm: Calendar month (1 to 12)
         gd: Calendar day of the month M (1 to 28/29/30/31)
         */
        function day2georgian(jdn) {
            var
                j,
                i,
                gd,
                gm,
                gy;

            j = 4 * jdn + 139361631
            j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908
            i = div(mod(j, 1461), 4) * 5 + 308
            gd = div(mod(i, 153), 5) + 1
            gm = mod(div(i, 153), 12) + 1
            gy = div(j, 1461) - 100100 + div(8 - gm, 6)
            return  {
                gy: gy,
                gm: gm,
                gd: gd
            }
        }

        function div(a, b) {
            return ~~(a / b)
        }

        function mod(a, b) {
            return a - ~~(a / b) * b
        }


        /*
         Checks whether a Jalaali date is valid or not.
         */
        function isValidJalaaliDate(jy, jm, jd) {
            return  jy >= -61 && jy <= 3177 &&
                jm >= 1 && jm <= 12 &&
                jd >= 1 && jd <= jalaaliMonthLength(jy, jm)
        }

        /*
         Is this a leap year or not?
         */
        function isLeapJalaaliYear(jy) {
            return jalCal(jy).leap === 0
        }

        /*
         Number of days in a given month in a Jalaali year.
         */
        function jalaaliMonthLength(jy, jm) {
            if (jm <= 6) return 31
            if (jm <= 11) return 30
            if (isLeapJalaaliYear(jy)) return 30
            return 29
        }

        /*
         This function determines if the Jalaali (Persian) year is
         leap (366-day long) or is the common year (365 days), and
         finds the day in March (Gregorian calendar) of the first
         day of the Jalaali year (jy).

         @param jy Jalaali calendar year (-61 to 3177)
         @return
         leap: number of years since the last leap year (0 to 4)
         gy: Gregorian year of the beginning of Jalaali year
         march: the March day of Farvardin the 1st (1st day of jy)
         @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
         @see: http://www.fourmilab.ch/documents/calendar/
         */
        function jalCal(jy) {
            // Jalaali years starting the 33-year rule.
            var breaks =  [ -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210
                    , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178
                ]
                , bl = breaks.length
                , gy = jy + 621
                , leapJ = -14
                , jp = breaks[0]
                , jm
                , jump
                , leap
                , leapG
                , march
                , n
                , i;

            if (jy < jp || jy >= breaks[bl - 1])
                throw new Error('Invalid Jalaali year ' + jy);

            // Find the limiting years for the Jalaali year jy.
            for (i = 1; i < bl; i += 1) {
                jm = breaks[i];
                jump = jm - jp;
                if (jy < jm)
                    break;
                leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
                jp = jm
            }
            n = jy - jp;

            // Find the number of leap years from AD 621 to the beginning
            // of the current Jalaali year in the Persian calendar.
            leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
            if (mod(jump, 33) === 4 && jump - n === 4)
                leapJ += 1

            // And the same in the Gregorian calendar (until the year gy).
            leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150

            // Determine the Gregorian date of Farvardin the 1st.
            march = 20 + leapJ - leapG

            // Find how many years have passed since the last leap year.
            if (jump - n < 6)
                n = n - jump + div(jump + 4, 33) * 33
            leap = mod(mod(n + 1, 33) - 1, 4)
            if (leap === -1) {
                leap = 4
            }

            return  { leap: leap
                , gy: gy
                , march: march
            }
        }
        factory.changeMonth = function(date,numOfMonthToAdd)
        {
            var garDate = factory.toGregorian(date.jy,date.jm,20);
            var standard_date = new Date(garDate.gy,garDate.gm,garDate.gd);
            console.log("changing Month Log :")
            console.log(garDate.gy,garDate.gm,garDate.jd);
            standard_date.setMonth(standard_date.getMonth() + numOfMonthToAdd);
            return factory.toJalaali(standard_date.getFullYear(),standard_date.getMonth(),standard_date.getDate());
        }
        factory.changeDay = function(date,numOfDayToAdd)
        {
            var day = jalali2day(date.jy,date.jm,date.jd);
            day = day + numOfDayToAdd;
            var JalaliDate = day2jalali(day);
            return JalaliDate;
        }

        factory.isValidJalaliDate=function(jy, jm, jd) {
            return  jy >= -61 && jy <= 3177 &&
                jm >= 1 && jm <= 12 &&
                jd >= 1 && jd <= jalaaliMonthLength(jy, jm)
        }
        factory.monthLength = function (jy,jm)
        {
            if (jm <= 6) return 31
            if (jm <= 11) return 30
            if (isLeapJalaaliYear(jy)) return 30
            return 29
        }


        return factory;
    })